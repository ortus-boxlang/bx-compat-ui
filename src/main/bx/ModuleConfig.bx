/**
 * This is the module descriptor and entry point for your module in the runtime.
 * The unique name of the moduel is the name of the directory on the modules folder.
 * A BoxLang mapping will be created for you with the name of the module.
 *
 * A module can have the following folders that will be automatically registered:
 * + bifs - Custom BIFs that will be registered into the runtime
 * + interceptors - Custom interceptors that will be registered into the runtime via the configure() method
 * + libs - Custom java libraries that your module leverages
 * + tags - Custom tags that will be registered into the runtime
 *
 * Every module will have its own classloader that will be used to load the module libs and dependencies.
 */

class {

	property name="moduleRecord";
	property name="boxRuntime";
	property name="log";

	/**
	 * --------------------------------------------------------------------------
	 * Module Properties
	 * --------------------------------------------------------------------------
	 * Here is where you define the properties of your module that the module service
	 * will use to register and activate your module
	 */

	/**
	 * Your module version. Try to use semantic versioning
	 * @mandatory
	 */
	this.version = "@build.version@+@build.number@";

	/**
	 * The BoxLang mapping for your module.  All BoxLang modules are registered with an internal
	 * mapping prefix of : bxModules.{this.mapping}, /bxmodules/{this.mapping}. Ex: bxModules.test, /bxmodules/test
	 */
	this.mapping = "bxCompatUI";

	/**
	 * Who built the module
	 */
	this.author = "Ortus Solutions";

	/**
	 * The module description
	 */
	this.description = "BoxLang UI Compatibility Module - provides CFML-compatible UI components";

	/**
	 * The module web URL
	 */
	this.webURL = "https://github.com/ortus-boxlang/bx-compat-ui";

	/**
	 * This boolean flag tells the module service to skip the module registration/activation process.
	 */
	this.enabled = true;

    /**
	 * The module dependencies that this module needs to be activated before this module is activated
	 */
	this.dependencies = [];

	/**
	 * --------------------------------------------------------------------------
	 * Module Methods
	 * --------------------------------------------------------------------------
	 */

	/**
	 * Called by the ModuleService on module registration
	 */
	function configure(){
		/**
		 * Every module has a settings configuration object
		 */
		settings = {
			loadedOn : now(),
			loadedBy : "Luis Majano"
		};

	}

}
