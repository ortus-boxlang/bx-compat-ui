/**
 * BoxLang Component Which Generates a Data Grid
 *
 * This component implements the functionality of the BoxLang Grid component,
 * providing a data grid with sorting, editing, and pagination capabilities.
 */
@BoxComponent( "Grid" )
@AllowsBody( true )
@RequiresBody( false )
class{

	/**
	 * The Grid UI component
	 *
	 * <pre>
	 * <bx:grid name="myGrid" query="#myQuery#" pageSize="10" sortable="true">
	 *     <bx:gridcolumn name="id" header="ID" width="80" />
	 *     <bx:gridcolumn name="name" header="Name" width="200" />
	 * </bx:grid>
	 * </pre>
	 *
	 * @attribute.name - string, required - Grid control name
	 * @attribute.query - any, optional - Query object to populate the grid
	 * @attribute.pageSize - number, optional - Number of rows per page (default: 25)
	 * @attribute.sortable - boolean, optional - Enable column sorting (default: true)
	 * @attribute.editable - boolean, optional - Enable cell editing (default: false)
	 * @attribute.autoWidth - boolean, optional - Auto-size columns to fit content (default: false)
	 * @attribute.height - string, optional - Grid height (CSS value)
	 * @attribute.width - string, optional - Grid width (CSS value)
	 * @attribute.stripeRows - boolean, optional - Alternate row colors (default: true)
	 * @attribute.showHeaders - boolean, optional - Show column headers (default: true)
	 * @attribute.selectMode - string, optional - Row selection mode: none, single, multi (default: single)
	 * @attribute.onLoad - string, optional - JavaScript function called when grid loads
	 * @attribute.onEdit - string, optional - JavaScript function called when cell is edited
	 * @attribute.onSort - string, optional - JavaScript function called when column is sorted
	 * @attribute.id - string, optional - HTML element ID (auto-generated if not provided)
	 * @attribute.class - string, optional - Additional CSS classes
	 * @attribute.style - string, optional - Additional CSS styles
	 * @attribute.appendKey - boolean, optional - Append key field to form data (default: false)
	 * @attribute.bgColor - string, optional - Background color for grid
	 * @attribute.bind - string, optional - Data binding expression for AJAX
	 * @attribute.bindOnLoad - boolean, optional - Whether to bind data on initial load (default: true)
	 * @attribute.bold - boolean, optional - Bold text formatting (default: false)
	 * @attribute.colHeaderBold - boolean, optional - Bold column headers (default: false)
	 * @attribute.colHeaderFont - string, optional - Column header font family
	 * @attribute.colHeaderFontSize - number, optional - Column header font size
	 * @attribute.colHeaderItalic - boolean, optional - Italic column headers (default: false)
	 * @attribute.colHeaderTextColor - string, optional - Column header text color
	 * @attribute.collapsible - boolean, optional - Whether grid is collapsible (default: false)
	 * @attribute.delete - boolean, optional - Allow delete operations (default: false)
	 * @attribute.deleteButton - boolean, optional - Show delete button (default: false)
	 * @attribute.enabled - boolean, optional - Enable/disable grid (default: true)
	 * @attribute.font - string, optional - Text font family
	 * @attribute.fontSize - number, optional - Text font size
	 * @attribute.format - Only HTML format is supported ( default )
	 * @attribute.gridDataAlign - string, optional - Data alignment: left, center, right (default: left)
	 * @attribute.groupfield - string, optional - Field to group by
	 * @attribute.href - string, optional - URL for links in grid
	 * @attribute.hrefKey - string, optional - Key field for href links
	 * @attribute.hSpace - number, optional - Horizontal spacing (default: 0)
	 * @attribute.insert - boolean, optional - Allow insert operations (default: false)
	 * @attribute.insertButton - boolean, optional - Show insert button (default: false)
	 * @attribute.italic - boolean, optional - Italic text formatting (default: false)
	 * @attribute.maxRows - number, optional - Maximum rows to display (default: 0 = no limit)
	 * @attribute.multirowselect - boolean, optional - Multiple row selection (default: false)
	 * @attribute.notSupported - string, optional - Message when grid format not supported
	 * @attribute.onBlur - string, optional - Blur event handler
	 * @attribute.onChange - string, optional - Change event handler
	 * @attribute.onError - string, optional - Error event handler
	 * @attribute.onFocus - string, optional - Focus event handler
	 * @attribute.onValidate - string, optional - Validation event handler
	 * @attribute.preservePageOnSort - boolean, optional - Preserve page when sorting (default: false)
	 * @attribute.resetHead - boolean, optional - Reset column headers (default: false)
	 * @attribute.rowHeight - number, optional - Height of rows in pixels
	 * @attribute.selectColor - string, optional - Selection highlight color
	 * @attribute.selectOnLoad - boolean, optional - Select first row on load (default: false)
	 * @attribute.stripeRowColor - string, optional - Alternate row color
	 * @attribute.target - string, optional - Target for href links
	 * @attribute.textColor - string, optional - Text color
	 * @attribute.title - string, optional - Grid title
	 * @attribute.tooltip - string, optional - Tooltip text
	 * @attribute.visible - boolean, optional - Grid visibility (default: true)
	 *
	 * @param context The context of the execution (IBoxContext)
	 * @param attributes The attributes of the component that were passed in
	 * @param body The body of the component that you can pass to `processBody(context, body, [buffer])` for execution and buffer retreival
	 * @param executionState The execution state of the component. Each component get's one as an isolated state.
	 *
	 * @return A BodyResult instance or null for a default result return.
	 */
	function invoke( required context, Struct attributes, any body, Struct executionState ){

		// Validate required name attribute
		if( isNull( attributes.name ) ){
			throw(
				type		= "boxlang.compat.ui.MissingAttributeException",
				message		= "The name attribute is required for the Grid component"
			);
		}

		// Set default values
		param attributes.query = "";
		param attributes.pageSize = 25;
		param attributes.sortable = true;
		param attributes.editable = false;
		param attributes.autoWidth = false;
		param attributes.height = "";
		param attributes.width = "";
		param attributes.stripeRows = true;
		param attributes.showHeaders = true;
		param attributes.selectMode = "none";
		param attributes.onLoad = "";
		param attributes.onEdit = "";
		param attributes.onSort = "";
		param attributes.class = "";
		param attributes.style = "";
		param attributes.appendKey = false;
		param attributes.bgColor = "";
		param attributes.bind = "";
		param attributes.bindOnLoad = true;
		param attributes.bold = false;
		param attributes.colHeaderBold = false;
		param attributes.colHeaderFont = "";
		param attributes.colHeaderFontSize = "";
		param attributes.colHeaderItalic = false;
		param attributes.colHeaderTextColor = "";
		param attributes.collapsible = false;
		param attributes.delete = false;
		param attributes.deleteButton = false;
		param attributes.enabled = true;
		param attributes.font = "";
		param attributes.fontSize = "";
		param attributes.format = "html";
		param attributes.gridDataAlign = "left";
		param attributes.groupfield = "";
		param attributes.href = "";
		param attributes.hrefKey = "";
		param attributes.hSpace = 0;
		param attributes.insert = false;
		param attributes.insertButton = false;
		param attributes.italic = false;
		param attributes.maxRows = 0;
		param attributes.multirowselect = false;
		param attributes.notSupported = "";
		param attributes.onBlur = "";
		param attributes.onChange = "";
		param attributes.onError = "";
		param attributes.onFocus = "";
		param attributes.onValidate = "";
		param attributes.preservePageOnSort = false;
		param attributes.resetHead = false;
		param attributes.rowHeight = "";
		param attributes.selectColor = "";
		param attributes.selectOnLoad = false;
		param attributes.stripeRowColor = "";
		param attributes.target = "";
		param attributes.textColor = "";
		param attributes.title = "";
		param attributes.tooltip = "";
		param attributes.visible = true;

		// Validate selectMode attribute
		var validSelectModes = [ "none", "single", "multi" ];
		if( !validSelectModes.containsNoCase( attributes.selectMode ) ){
			throw(
				type		= "boxlang.compat.ui.InvalidAttributeException",
				message		= "The selectMode attribute must be one of: #validSelectModes.toList()#"
			);
		}

		// Validate format attribute
		var validFormats = [ "html" ];
		if( !validFormats.containsNoCase( attributes.format ) ){
			throw(
				type		= "boxlang.compat.ui.InvalidAttributeException",
				message		= "The format attribute must be one of: #validFormats.toList()#"
			);
		}

		// Validate gridDataAlign attribute
		var validDataAligns = [ "left", "center", "right" ];
		if( len( attributes.gridDataAlign ) && !validDataAligns.containsNoCase( attributes.gridDataAlign ) ){
			throw(
				type		= "boxlang.compat.ui.InvalidAttributeException",
				message		= "The gridDataAlign attribute must be one of: #validDataAligns.toList()#"
			);
		}

		// Handle multirowselect mapping to selectMode
		if( attributes.multirowselect ){
			attributes.selectMode = "multi";
		}

		// Generate unique ID if not provided
		if( isNull( attributes.id ) ){
			attributes.id = "grid_" & listLast( lcase( createUUID() ), "-" );
		}

		// Non-HTML attributes that should not be passed through
		var nonHTMLAttributes = [
			"name", "query", "pageSize", "sortable", "editable", "autoWidth", "stripeRows", "showHeaders", "selectMode",
			"onLoad", "onEdit", "onSort", "appendKey", "bind", "bindOnLoad", "bold", "colHeaderBold", "colHeaderFont",
			"colHeaderFontSize", "colHeaderItalic", "colHeaderTextColor", "collapsible", "delete", "deleteButton",
			"enabled", "font", "fontSize", "format", "gridDataAlign", "groupfield", "href", "hrefKey", "hSpace",
			"insert", "insertButton", "italic", "maxRows", "multirowselect", "notSupported", "onBlur", "onChange",
			"onError", "onFocus", "onValidate", "preservePageOnSort", "resetHead", "rowHeight", "selectColor",
			"selectOnLoad", "stripeRowColor", "target", "textColor", "title", "tooltip", "visible"
		];

		// Initialize grid state
		executionState.gridName = attributes.name;
		executionState.gridId = attributes.id;
		executionState.columns = [];
		executionState.rows = [];
		executionState.query = attributes.query;
		executionState.pageSize = attributes.pageSize;
		executionState.currentPage = 1;
		executionState.sortColumn = "";
		executionState.sortDirection = "ASC";
		executionState.selectMode = lcase( attributes.selectMode );

		// Generate CSS classes
		var cssClasses = [ "bx-grid" ];

		if( attributes.stripeRows ){
			cssClasses.append( "bx-grid-striped" );
		}

		if( attributes.sortable ){
			cssClasses.append( "bx-grid-sortable" );
		}

		if( attributes.editable ){
			cssClasses.append( "bx-grid-editable" );
		}

		if( attributes.collapsible ){
			cssClasses.append( "bx-grid-collapsible" );
		}

		if( attributes.delete ){
			cssClasses.append( "bx-grid-deletable" );
		}

		if( attributes.insert ){
			cssClasses.append( "bx-grid-insertable" );
		}

		if( !attributes.enabled ){
			cssClasses.append( "bx-grid-disabled" );
		}

		// Add data alignment class
		if( len( attributes.gridDataAlign ) ){
			cssClasses.append( "bx-grid-align-#lcase( attributes.gridDataAlign )#" );
		}

		// Add custom classes if provided
		if( !isNull( attributes.class ) && len( attributes.class ) ){
			cssClasses.append( attributes.class );
		}

		// Start building the grid container
		var gridContent = "<div";

		// Add ID
		gridContent &= " id=""#encodeForHTMLAttribute( attributes.id )#""";

		// Add CSS classes
		gridContent &= " class=""#cssClasses.toList( " " )#""";

		// Add data attributes
		gridContent &= " data-name=""#encodeForHTMLAttribute( attributes.name )#""";
		gridContent &= " data-page-size=""#attributes.pageSize#""";
		gridContent &= " data-sortable=""#attributes.sortable#""";
		gridContent &= " data-editable=""#attributes.editable#""";
		gridContent &= " data-select-mode=""#attributes.selectMode#""";
		gridContent &= " data-enabled=""#attributes.enabled#""";
		gridContent &= " data-append-key=""#attributes.appendKey#""";
		gridContent &= " data-delete=""#attributes.delete#""";
		gridContent &= " data-insert=""#attributes.insert#""";
		gridContent &= " data-collapsible=""#attributes.collapsible#""";
		gridContent &= " data-preserve-page=""#attributes.preservePageOnSort#""";
		gridContent &= " data-select-on-load=""#attributes.selectOnLoad#""";
		gridContent &= " data-data-align=""#attributes.gridDataAlign#""";
		if( !isNull( attributes.bind ) && len( attributes.bind ) ){
			gridContent &= " data-bind=""#encodeForHTMLAttribute( attributes.bind )#""";
			gridContent &= " data-bind-on-load=""#attributes.bindOnLoad#""";
		}
		if( !isNull( attributes.href ) && len( attributes.href ) ){
			gridContent &= " data-href=""#encodeForHTMLAttribute( attributes.href )#""";
		}
		if( !isNull( attributes.hrefKey ) && len( attributes.hrefKey ) ){
			gridContent &= " data-href-key=""#encodeForHTMLAttribute( attributes.hrefKey )#""";
		}
		if( !isNull( attributes.target ) && len( attributes.target ) ){
			gridContent &= " data-target=""#encodeForHTMLAttribute( attributes.target )#""";
		}
		if( attributes.maxRows > 0 ){
			gridContent &= " data-max-rows=""#attributes.maxRows#""";
		}
		if( !isNull( attributes.groupfield ) && len( attributes.groupfield ) ){
			gridContent &= " data-group-field=""#encodeForHTMLAttribute( attributes.groupfield )#""";
		}
		if( !isNull( attributes.title ) && len( attributes.title ) ){
			gridContent &= " title=""#encodeForHTMLAttribute( attributes.title )#""";
		}
		if( !isNull( attributes.tooltip ) && len( attributes.tooltip ) ){
			gridContent &= " data-tooltip=""#encodeForHTMLAttribute( attributes.tooltip )#""";
		}

		// Build inline styles
		var inlineStyles = [];

		if( !isNull( attributes.height ) && len( attributes.height ) ){
			inlineStyles.append( "height: #attributes.height#" );
		}
		if( !isNull( attributes.width ) && len( attributes.width ) ){
			inlineStyles.append( "width: #attributes.width#" );
		}
		if( !isNull( attributes.bgColor ) && len( attributes.bgColor ) ){
			inlineStyles.append( "background-color: #attributes.bgColor#" );
		}
		if( !isNull( attributes.textColor ) && len( attributes.textColor ) ){
			inlineStyles.append( "color: #attributes.textColor#" );
		}
		if( !isNull( attributes.font ) && len( attributes.font ) ){
			inlineStyles.append( "font-family: #attributes.font#" );
		}
		if( !isNull( attributes.fontSize ) && len( attributes.fontSize ) ){
			inlineStyles.append( "font-size: #attributes.fontSize#px" );
		}
		if( attributes.bold ){
			inlineStyles.append( "font-weight: bold" );
		}
		if( attributes.italic ){
			inlineStyles.append( "font-style: italic" );
		}
		if( !isNull( attributes.rowHeight ) && len( attributes.rowHeight ) ){
			inlineStyles.append( "--bx-grid-row-height: #attributes.rowHeight#px" );
		}
		if( !isNull( attributes.selectColor ) && len( attributes.selectColor ) ){
			inlineStyles.append( "--bx-grid-select-color: #attributes.selectColor#" );
		}
		if( !isNull( attributes.stripeRowColor ) && len( attributes.stripeRowColor ) ){
			inlineStyles.append( "--bx-grid-stripe-color: #attributes.stripeRowColor#" );
		}
		if( !isNull( attributes.hSpace ) && attributes.hSpace > 0 ){
			inlineStyles.append( "margin-left: #attributes.hSpace#px; margin-right: #attributes.hSpace#px" );
		}
		if( !attributes.visible ){
			inlineStyles.append( "display: none" );
		}
		if( !isNull( attributes.style ) && len( attributes.style ) ){
			inlineStyles.append( attributes.style );
		}

		if( inlineStyles.len() ){
			gridContent &= " style=""#inlineStyles.toList( "; " )#""";
		}

		// Add HTML attributes (excluding non-HTML ones)
		attributes.filter( ( key, value ) => !isNull( value ) && !nonHTMLAttributes.containsNoCase( key ) && key != "id" && key != "class" && key != "style" ).each( ( key, value ) => {
			gridContent &= " #key#=""#encodeForHTMLAttribute( value )#""";
		} );

		gridContent &= ">";

		// Write opening container
		context.writeToBuffer( gridContent );

		// Process body to capture GridColumn and GridRow components
		var buffer = newBuffer();
		var bodyResult = processBody( context, body, buffer );

		// Generate grid table structure
		generateGridStructure( context, attributes, executionState );

		// Close container
		context.writeToBuffer( "</div>" );

		// Generate JavaScript for grid functionality
		generateGridScript( context, attributes, executionState );
	}

	/**
	 * Generate grid table structure
	 */
	private function generateGridStructure( required context, required attributes, required executionState ){
		var tableContent = "<table class=""bx-grid-table"">";

		// Generate headers if enabled
		if( attributes.showHeaders ){
			tableContent &= generateGridHeaders( attributes, executionState );
		}

		// Generate body
		tableContent &= "<tbody class=""bx-grid-body"">";
		tableContent &= generateGridRows( executionState );
		tableContent &= "</tbody>";

		tableContent &= "</table>";

		// Add action buttons if enabled
		if( attributes.insertButton || attributes.deleteButton ){
			tableContent &= generateGridActionButtons( attributes );
		}

		// Add pagination if needed
		if( executionState.pageSize > 0 ){
			tableContent &= generateGridPagination( executionState );
		}

		context.writeToBuffer( tableContent );
	}

	/**
	 * Generate grid headers
	 */
	private function generateGridHeaders( required attributes, required executionState ){
		var headContent = "<thead class=""bx-grid-header""><tr>";

		// Add selection column if needed
		if( executionState.selectMode != "none" ){
			var selectType = executionState.selectMode == "multi" ? "checkbox" : "radio";
			headContent &= "<th class=""bx-grid-select-header"">";
			headContent &= "<input type=""#selectType#"" class=""bx-grid-select-all"" />";
			headContent &= "</th>";
		}

		// Generate column headers
		var columns = executionState.columns ?: [];
		for( var column in columns ){
			var sortClass = "";
			if( executionState.sortColumn == column.name ){
				sortClass = " bx-grid-sorted bx-grid-sort-" & lcase( executionState.sortDirection );
			}

			headContent &= "<th class=""bx-grid-column-header#sortClass#""";
			headContent &= " data-column=""#encodeForHTMLAttribute( column.name )#""";

			// Build column header styles
			var headerStyles = [];
			if( !isNull( column.width ) && len( column.width ) ){
				headerStyles.append( "width: #column.width#" );
			}
			if( !isNull( attributes.colHeaderTextColor ) && len( attributes.colHeaderTextColor ) ){
				headerStyles.append( "color: #attributes.colHeaderTextColor#" );
			}
			if( !isNull( attributes.colHeaderFont ) && len( attributes.colHeaderFont ) ){
				headerStyles.append( "font-family: #attributes.colHeaderFont#" );
			}
			if( !isNull( attributes.colHeaderFontSize ) && len( attributes.colHeaderFontSize ) ){
				headerStyles.append( "font-size: #attributes.colHeaderFontSize#px" );
			}
			if( attributes.colHeaderBold ){
				headerStyles.append( "font-weight: bold" );
			}
			if( attributes.colHeaderItalic ){
				headerStyles.append( "font-style: italic" );
			}

			if( headerStyles.len() ){
				headContent &= " style=""#headerStyles.toList( "; " )#""";
			}

			headContent &= ">";
			headContent &= encodeForHTML( column.header ?: column.name );

			// Add sort indicator if sortable
			if( column.sortable ){
				headContent &= "<span class=""bx-grid-sort-indicator""></span>";
			}

			headContent &= "</th>";
		}

		headContent &= "</tr></thead>";
		return headContent;
	}

	/**
	 * Generate grid rows
	 */
	private function generateGridRows( required executionState ){
		var rowsContent = "";
		var query = executionState.query;
		var rows = executionState.rows ?: [];
		var columns = executionState.columns ?: [];

		// Handle query data
		if( !isNull( query ) && isQuery( query ) ){
			var startRow = ( executionState.currentPage - 1 ) * executionState.pageSize + 1;
			var endRow = min( startRow + executionState.pageSize - 1, query.recordCount );

			for( var i = startRow; i <= endRow; i++ ){
				rowsContent &= "<tr class=""bx-grid-row"" data-row=""#i#"">";

				// Add selection column if needed
				if( executionState.selectMode != "none" ){
					var selectType = executionState.selectMode == "multi" ? "checkbox" : "radio";
					rowsContent &= "<td class=""bx-grid-select-cell"">";
					rowsContent &= "<input type=""#selectType#"" name=""#executionState.gridName#_select"" value=""#i#"" />";
					rowsContent &= "</td>";
				}

				// Generate data cells
				for( var column in columns ){
					var cellValue = "";
					if( query.columnExists( column.name ) ){
						cellValue = query.getCell( column.name, i );
					}

					rowsContent &= "<td class=""bx-grid-cell""";
					rowsContent &= " data-column=""#encodeForHTMLAttribute( column.name )#""";

					if( column.editable ){
						rowsContent &= " contenteditable=""true""";
						rowsContent &= " class=""bx-grid-cell bx-grid-editable-cell""";
					}

					rowsContent &= ">";
					rowsContent &= cellValue;
					rowsContent &= "</td>";
				}

				rowsContent &= "</tr>";
			}
		}

		// Handle manual rows - use pre-generated HTML from GridRow components
		for( var row in rows ){
			if( structKeyExists( row, "html" ) && len( row.html ) ){
				// Use pre-generated HTML from GridRow component
				rowsContent &= row.html;
			} else {
				// Fallback to basic row generation for backward compatibility
				rowsContent &= "<tr class=""bx-grid-row"">";

				// Add selection column if needed
				if( executionState.selectMode != "none" ){
					var selectType = executionState.selectMode == "multi" ? "checkbox" : "radio";
					rowsContent &= "<td class=""bx-grid-select-cell"">";
					rowsContent &= "<input type=""#selectType#"" name=""#executionState.gridName#_select"" />";
					rowsContent &= "</td>";
				}

				// Generate data cells from row data
				for( var column in columns ){
					var cellValue = row[ column.name ] ?: "";

					rowsContent &= "<td class=""bx-grid-cell""";
					rowsContent &= " data-column=""#encodeForHTMLAttribute( column.name )#""";

					if( column.editable ){
						rowsContent &= " contenteditable=""true""";
						rowsContent &= " class=""bx-grid-cell bx-grid-editable-cell""";
					}

					rowsContent &= ">";
					rowsContent &= encodeForHTML( cellValue );
					rowsContent &= "</td>";
				}

				rowsContent &= "</tr>";
			}
		}

		return rowsContent;
	}

	/**
	 * Generate grid pagination
	 */
	private function generateGridPagination( required executionState ){
		var totalRows = 0;
		if( !isNull( executionState.query ) && isQuery( executionState.query ) ){
			totalRows = executionState.query.recordCount;
		} else {
			totalRows = executionState.rows.len();
		}

		var totalPages = ceiling( totalRows / executionState.pageSize );
		var currentPage = executionState.currentPage;

		if( totalPages <= 1 ){
			return "";
		}

		var paginationContent = "<div class=""bx-grid-pagination"">";

		// Previous button
		if( currentPage > 1 ){
			paginationContent &= "<button class=""bx-grid-page-btn"" data-page=""#currentPage - 1#"">&laquo; Previous</button>";
		}

		// Page numbers
		var startPage = max( 1, currentPage - 2 );
		var endPage = min( totalPages, currentPage + 2 );

		for( var i = startPage; i <= endPage; i++ ){
			var activeClass = i == currentPage ? " active" : "";
			paginationContent &= "<button class=""bx-grid-page-btn#activeClass#"" data-page=""#i#"">#i#</button>";
		}

		// Next button
		if( currentPage < totalPages ){
			paginationContent &= "<button class=""bx-grid-page-btn"" data-page=""#currentPage + 1#"">Next &raquo;</button>";
		}

		paginationContent &= "</div>";

		return paginationContent;
	}

	/**
	 * Generate grid action buttons
	 */
	private function generateGridActionButtons( required attributes ){
		var buttonContent = "<div class=""bx-grid-actions"">";

		if( attributes.insertButton ){
			buttonContent &= "<button type=""button"" class=""bx-grid-insert-btn"" data-action=""insert"">Insert</button>";
		}

		if( attributes.deleteButton ){
			buttonContent &= "<button type=""button"" class=""bx-grid-delete-btn"" data-action=""delete"">Delete</button>";
		}

		buttonContent &= "</div>";
		return buttonContent;
	}

	/**
	 * Generate JavaScript for grid functionality
	 */
	private function generateGridScript( required context, required attributes, required executionState ){
		var gridId = attributes.id;
		var script = "<script type=""text/javascript"">";
		script &= "(function(){";
		script &= "var grid = document.getElementById('#gridId#');";
		script &= generateGridBehaviorScript( attributes, executionState );
		script &= "})();";
		script &= "</script>";

		context.writeToBuffer( script );
	}

	/**
	 * Generate grid behavior script
	 */
	private function generateGridBehaviorScript( required attributes, required executionState ){
		return "
			// Grid event handlers
			grid.addEventListener('click', function(e) {
				// Handle column sorting
				if (e.target.closest('.bx-grid-column-header') && grid.dataset.sortable === 'true') {
					var header = e.target.closest('.bx-grid-column-header');
					var column = header.dataset.column;
					sortColumn(column);
				}

				// Handle pagination
				if (e.target.classList.contains('bx-grid-page-btn')) {
					var page = parseInt(e.target.dataset.page);
					goToPage(page);
				}

				// Handle select all
				if (e.target.classList.contains('bx-grid-select-all')) {
					toggleSelectAll(e.target.checked);
				}
			});

			// Handle cell editing
			if (grid.dataset.editable === 'true') {
				grid.addEventListener('blur', function(e) {
					if (e.target.classList.contains('bx-grid-editable-cell')) {
						var column = e.target.dataset.column;
						var row = e.target.closest('.bx-grid-row').dataset.row;
						var value = e.target.textContent;

						// Fire edit event
						#len( attributes.onEdit ) ? attributes.onEdit & '(column, row, value);' : ''#

						// Fire custom event
						var event = new CustomEvent('gridCellEdit', {
							detail: { column: column, row: row, value: value }
						});
						grid.dispatchEvent(event);
					}
				}, true);
			}

			function sortColumn(column) {
				var header = grid.querySelector('.bx-grid-column-header[data-column=""' + column + '""]');
				var currentSort = header.classList.contains('bx-grid-sort-asc') ? 'asc' :
								  header.classList.contains('bx-grid-sort-desc') ? 'desc' : 'none';
				var newSort = currentSort === 'asc' ? 'desc' : 'asc';

				// Remove all sort classes
				grid.querySelectorAll('.bx-grid-column-header').forEach(function(h) {
					h.classList.remove('bx-grid-sorted', 'bx-grid-sort-asc', 'bx-grid-sort-desc');
				});

				// Add new sort class
				header.classList.add('bx-grid-sorted', 'bx-grid-sort-' + newSort);

				// Fire sort event
				#len( attributes.onSort ) ? attributes.onSort & '(column, newSort);' : ''#

				// Fire custom event
				var event = new CustomEvent('gridSort', {
					detail: { column: column, direction: newSort }
				});
				grid.dispatchEvent(event);
			}

			function goToPage(page) {
				// This would typically reload grid data for the specified page
				// Fire custom event for now
				var event = new CustomEvent('gridPageChange', {
					detail: { page: page }
				});
				grid.dispatchEvent(event);
			}

			function toggleSelectAll(checked) {
				grid.querySelectorAll('input[name=""#executionState.gridName#_select""]').forEach(function(cb) {
					cb.checked = checked;
				});
			}

			// Fire load event
			#len( attributes.onLoad ) ? 'setTimeout(function() { ' & attributes.onLoad & '(); }, 0);' : ''#
		";
	}
}