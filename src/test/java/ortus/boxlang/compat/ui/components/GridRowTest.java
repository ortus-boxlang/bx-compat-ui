/**
 * [BoxLang]
 *
 * Copyright [2023] [Ortus Solutions, Corp]
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package ortus.boxlang.compat.ui.components;

import static com.google.common.truth.Truth.assertThat;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import ortus.boxlang.compat.ui.BaseIntegrationTest;
import ortus.boxlang.runtime.scopes.Key;

public class GridRowTest extends BaseIntegrationTest {

	@DisplayName( "It can create grid rows within grid" )
	@Test
	public void testBasicGridRow() {
		runtime.executeSource(
		    """
		    bx:grid name="rowTest" {
		        bx:gridcolumn name="id" header="ID";
		        bx:gridcolumn name="name" header="Name";
		        bx:gridrow data="#{ id: 1, name: 'John Doe' }#";
		        bx:gridrow data="#{ id: 2, name: 'Jane Smith' }#";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "bx-grid-row" );
		assertThat( output ).contains( "bx-grid-cell" );
		assertThat( output ).contains( "John Doe" );
		assertThat( output ).contains( "Jane Smith" );
		assertThat( output ).contains( "data-column=\"id\"" );
		assertThat( output ).contains( "data-column=\"name\"" );
	}

	@DisplayName( "It throws error when used outside Grid component" )
	@Test
	public void testGridRowOutsideGrid() {
		try {
			runtime.executeSource(
			    """
			    bx:gridrow data="#{ test: 'value' }#";
			    """,
			    context
			);
		} catch ( Exception e ) {
			assertThat( e.getMessage() ).contains( "GridRow component must be used within a Grid component" );
		}
	}

	@DisplayName( "It auto-generates ID when not provided" )
	@Test
	public void testGridRowAutoGeneratedID() {
		runtime.executeSource(
		    """
		    bx:grid name="autoIdRowGrid" {
		        bx:gridcolumn name="test";
		        bx:gridrow data="#{ test: 'auto id test' }#";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "id=\"gridrow_" );
		assertThat( output ).contains( "auto id test" );
	}

	@DisplayName( "It can use custom row ID" )
	@Test
	public void testGridRowCustomID() {
		runtime.executeSource(
		    """
		    bx:grid name="customIdRowGrid" {
		        bx:gridcolumn name="test";
		        bx:gridrow id="myCustomRow" data="#{ test: 'custom id test' }#";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "id=\"myCustomRow\"" );
		assertThat( output ).contains( "custom id test" );
	}

	@DisplayName( "It can apply row styling" )
	@Test
	public void testGridRowStyling() {
		runtime.executeSource(
		    """
		    bx:grid name="styledRowGrid" {
		        bx:gridcolumn name="name";
		        bx:gridrow
		            data="#{ name: 'Styled Row' }#"
		            bgcolor="lightblue"
		            textColor="darkblue"
		            class="my-row-class"
		            style="font-weight: bold;";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "background-color: lightblue" );
		assertThat( output ).contains( "color: darkblue" );
		assertThat( output ).contains( "font-weight: bold" );
		assertThat( output ).contains( "my-row-class" );
		assertThat( output ).contains( "Styled Row" );
	}

	@DisplayName( "It can mark rows as initially selected" )
	@Test
	public void testGridRowSelected() {
		runtime.executeSource(
		    """
		    bx:grid name="selectedRowGrid" selectMode="single" {
		        bx:gridcolumn name="name";
		        bx:gridrow data="#{ name: 'Normal Row' }#" selected="false";
		        bx:gridrow data="#{ name: 'Selected Row' }#" selected="true";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "bx-grid-row-selected" );
		assertThat( output ).contains( "data-selected=\"true\"" );
		assertThat( output ).contains( "Normal Row" );
		assertThat( output ).contains( "Selected Row" );
	}

	@DisplayName( "It handles empty data gracefully" )
	@Test
	public void testGridRowEmptyData() {
		runtime.executeSource(
		    """
		    bx:grid name="emptyRowGrid" {
		        bx:gridcolumn name="col1";
		        bx:gridcolumn name="col2";
		        bx:gridrow data="#{}#";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "bx-grid-row" );
		assertThat( output ).contains( "bx-grid-cell" );
		assertThat( output ).contains( "data-column=\"col1\"" );
		assertThat( output ).contains( "data-column=\"col2\"" );
	}

	@DisplayName( "It can handle body content when no data provided" )
	@Test
	public void testGridRowWithBodyContent() {
		runtime.executeSource(
		    """
		    bx:grid name="bodyContentRowGrid" {
		        bx:gridcolumn name="content";
		        bx:gridrow {
		            writeOutput("Body content for row");
		        }
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "bx-grid-row" );
		assertThat( output ).contains( "Body content for row" );
	}

	@DisplayName( "It generates selection cells for selectable grids" )
	@Test
	public void testGridRowWithSelection() {
		runtime.executeSource(
		    """
		    bx:grid name="selectableRowGrid" selectMode="multi" {
		        bx:gridcolumn name="name";
		        bx:gridrow data="#{ name: 'Selectable Row 1' }#";
		        bx:gridrow data="#{ name: 'Selectable Row 2' }#" selected="true";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "bx-grid-select-cell" );
		assertThat( output ).contains( "type=\"checkbox\"" );
		assertThat( output ).contains( "name=\"selectableRowGrid_select\"" );
		assertThat( output ).contains( "checked" ); // For the selected row
		assertThat( output ).contains( "Selectable Row 1" );
		assertThat( output ).contains( "Selectable Row 2" );
	}

	@DisplayName( "It handles multiple rows with different styling" )
	@Test
	public void testGridRowMultipleStyling() {
		runtime.executeSource(
		    """
		    bx:grid name="multiStyleRowGrid" stripeRows="true" {
		        bx:gridcolumn name="status";
		        bx:gridrow data="#{ status: 'Active' }#" bgcolor="lightgreen";
		        bx:gridrow data="#{ status: 'Inactive' }#" bgcolor="lightcoral";
		        bx:gridrow data="#{ status: 'Pending' }#" bgcolor="lightyellow";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "background-color: lightgreen" );
		assertThat( output ).contains( "background-color: lightcoral" );
		assertThat( output ).contains( "background-color: lightyellow" );
		assertThat( output ).contains( "Active" );
		assertThat( output ).contains( "Inactive" );
		assertThat( output ).contains( "Pending" );
		assertThat( output ).contains( "bx-grid-striped" );
	}

	@DisplayName( "It handles partial data matches with columns" )
	@Test
	public void testGridRowPartialData() {
		runtime.executeSource(
		    """
		    bx:grid name="partialDataGrid" {
		        bx:gridcolumn name="id";
		        bx:gridcolumn name="name";
		        bx:gridcolumn name="email";
		        bx:gridrow data="#{ id: 1, name: 'John' }#"; // Missing email
		        bx:gridrow data="#{ name: 'Jane', email: 'jane@test.com' }#"; // Missing id
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "data-column=\"id\"" );
		assertThat( output ).contains( "data-column=\"name\"" );
		assertThat( output ).contains( "data-column=\"email\"" );
		assertThat( output ).contains( "John" );
		assertThat( output ).contains( "Jane" );
		assertThat( output ).contains( "jane&#x40;test.com" );
	}

	@DisplayName( "It preserves CSS classes across multiple rows" )
	@Test
	public void testGridRowMultipleClasses() {
		runtime.executeSource(
		    """
		    bx:grid name="multiClassRowGrid" {
		        bx:gridcolumn name="type";
		        bx:gridrow data="#{ type: 'Error' }#" class="error-row critical";
		        bx:gridrow data="#{ type: 'Warning' }#" class="warning-row";
		        bx:gridrow data="#{ type: 'Info' }#" class="info-row normal";
		    }
		    result = getBoxContext().getBuffer().toString()
		    """,
		    context
		);

		String output = variables.getAsString( Key.of( "result" ) );
		assertThat( output ).contains( "error-row critical" );
		assertThat( output ).contains( "warning-row" );
		assertThat( output ).contains( "info-row normal" );
		assertThat( output ).contains( "Error" );
		assertThat( output ).contains( "Warning" );
		assertThat( output ).contains( "Info" );
	}
}